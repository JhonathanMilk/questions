#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>

#define MAXSIZE 100010

typedef struct list
{
    struct adjList *next;
    int item;
}adjList;

typedef struct grafo
{
    adjList *vertices[MAXSIZE];
    int visited[MAXSIZE];
    int distance[MAXSIZE];
}graph;

typedef struct fila
{
    adjList *head;
}queue;

graph *createGraph()
{
    int i;
    graph*newGraph = (graph*)malloc(sizeof(graph));
    for(i=0; i<MAXSIZE; i++)
    {
        newGraph->vertices[i] = NULL;
        newGraph->visited[i] = 0;
        newGraph->distance[i] = 0;
    }
    return newGraph;
}

/*void printar(graph *graph, int qtVertices)
{
    int i;
    adjList *aux;
    for (i=1; i<=qtVertices; i++)
    {
        aux = graph->vertices[i];
        printf("%d - ", i);
        while (aux != NULL)
        {
            printf("%d - ", aux->item);
            aux = aux->next;
        }
        printf("\n");
    }
}*/

adjList *aloc(int item)
{
    adjList *vertex = (adjList*)malloc(sizeof(adjList));
    vertex->next = NULL;
    vertex->item = item;
    return vertex;
}

void enqueue(queue *queue, int item)
{
    adjList *node = aloc(item);
    if (queue->head == NULL){
        queue->head = node;
    }
    else
    {
        adjList *aux = queue->head;
        while(aux->next != NULL)
        {
            aux = aux->next;
        }
        aux->next = node;
    }
}

int dequeue(queue *queue)
{
    adjList *aux = queue->head; 
    int dequeue = aux->item;
    queue->head = aux->next;
    free(aux);
    return dequeue;
}

void BFS(graph* graph, int source, int destiny, int*ShortestDistance)
{
    queue *newQueue = (queue*)malloc(sizeof(queue));
    int dequeued;
    adjList *adjlist;
    graph->visited[source] = 1;

    enqueue(newQueue, source);

    while(newQueue->head != NULL)
    {
        dequeued = dequeue(newQueue);
        adjlist = graph->vertices[dequeued];
        while(adjlist != NULL){
            if (!graph->visited[adjlist->item])
            {
                graph->distance[adjlist->item] = graph->distance[dequeued]+1;
                graph->visited[adjlist->item] = 1;
                enqueue(newQueue, adjlist->item);
                if (adjlist->item == destiny)
                {
                    *ShortestDistance = graph->distance[adjlist->item];
                    return;
                }
            }
            adjlist = adjlist->next;
        }
    }
}

void addEdge(graph *graph, int vertice1, int vertice2)
{
    adjList *vertex1 = aloc(vertice1);
    adjList *vertex2 = aloc(vertice2);
    if (graph->vertices[vertice1] == NULL)
    {
        graph->vertices[vertice1] = vertex2;
    }
    else
    {
        vertex2->next = graph->vertices[vertice1];
        graph->vertices[vertice1] = vertex2;
    }
}

int main()
{
    int ShortestDistance=MAXSIZE, i, j, qtTests, qtIslands, qtBridges, vertex1, vertex2;
    graph *newGraph;

    scanf("%d", &qtTests);

    for(i=0; i<qtTests; i++)
    {
        newGraph = createGraph();
        scanf("%d %d", &qtIslands, &qtBridges);
        for(j=0; j<qtBridges; j++)
        {
            scanf("%d %d", &vertex1, &vertex2);
            addEdge(newGraph, vertex1, vertex2);
            addEdge(newGraph, vertex2, vertex1);
        }
        
        BFS(newGraph, 1, qtIslands, &ShortestDistance);

        if(ShortestDistance == MAXSIZE)
        {
            printf("-1\n");
        }
        else
        {
            printf("%d\n", ShortestDistance);
        }
        ShortestDistance=MAXSIZE;
    }

    return 0;
}
